import streamlit as st
from PIL import Image

from rqle_ai_langchain_util.utils.file_util import read_image
from rqle_ai_langchain_util.clarity_genie_example.clarity_genie import ClarityGenie

COMPANY_LOG_PATH = 'img/rqle_ai_logo.jpg'
COMPANY_LOGO = Image.open(COMPANY_LOG_PATH)
COMPANY_NAME = 'RQle.AI'
APPLICATION_LOGO_PATH = 'img/claritygenie_logo.jpg'
APPLICATION_LOGO = Image.open(APPLICATION_LOGO_PATH)
APPLICATION_NAME = 'ClarityGenie'


# set up the high-level configuration of the page
st.set_page_config(page_title=APPLICATION_NAME, page_icon=APPLICATION_LOGO,
                   layout='wide', initial_sidebar_state='collapsed')

# information about / help component of the application
st.sidebar.image(image=COMPANY_LOGO, width=100)
st.sidebar.header(body='About')
st.sidebar.markdown(body=f"""
 **{APPLICATION_NAME}**:copyright: was developed by **RQle AI** to enable Generative AI developers to refine their prompts. More specifically, 
 it attempts to improve clarity and contextual understanding of prompts.
""")

st.sidebar.header(body=COMPANY_NAME)
st.sidebar.markdown(body=f"""
 **{COMPANY_NAME}** believes in the transformative potential of Generative AI. More specifically, it focuses on showcasing 
 real-world applications of how Generative AI can empower individuals and organizations worldwide in addressing 
 their customers' "*job to be done*" problems and create value for them.
""")

st.sidebar.header(body='Resources')
st.sidebar.markdown(body="""
- [GitHub Repository](https://github.com/RQledotai/rqle-ai-langchain-util)
- [LinkedIn Profile](https://www.linkedin.com/company/102641077)
- **Author**: [Quentin Reul](https://www.linkedin.com/in/quentinreul/)
""")

st.sidebar.header(body='Disclaimer')
st.sidebar.markdown(body="""
This application was partially generated by a large language model (Generative AI). While the AI assisted in the 
generation of ideas and content, the final solution and its implementation remain the responsibility of the human user. 
It is important to critically evaluate and revise the AI-generated content to ensure its accuracy, appropriateness, 
and ethical implications.
""")

# set the logo / title of the application
st.markdown(body=f"""
 <h1 align="center">
    <img src="data:image/jpeg;base64,{read_image(APPLICATION_LOGO_PATH)}" alt="{APPLICATION_LOGO_PATH}" 
         width="100" height="100"/> - 
    {APPLICATION_NAME}&copy;
 </h1>
 <hr/>
""", unsafe_allow_html=True)


# main body of the application
input, output = st.columns([1.5, 2.5])
output.subheader('Clarified Prompt', divider='rainbow')

with input:
    with st.form(key='prompt_input'):
        st.subheader('Paste Prompt', divider='rainbow',help='Please paste a prompt to be clarified.')
        prompt = st.text_area(label='Prompt',key='prompt', height=400, label_visibility='hidden')
        # form submission button
        submit = st.form_submit_button(label='Clarify', type='primary')

        # execute logic if submit button is clicked
        if submit:
            if not prompt or prompt == '':
                st.error('Please enter a prompt to be clarified.')
            else:
                with output:
                    with st.spinner('Clarifying prompt...'):
                        clarity_genie = ClarityGenie(config_folder='clarity_genie')
                        clarified_prompt = clarity_genie.invoke_chain(prompt)
                        st.write(clarified_prompt['text'])

# information about the footer of the application (including logo and years)
st.markdown(body=f"""
 <hr/>
 <h5 align="center">
    2024 - All rights reserved.
    <img src="data:image/jpeg;base64,{read_image(COMPANY_LOG_PATH)}" alt="{COMPANY_LOG_PATH}" 
         width="50" height="50"/>
 </h5>
""", unsafe_allow_html=True)
